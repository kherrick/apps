/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { backend_util, Dilation2DBackpropInput } from '@tensorflow/tfjs-core';
import { CppDType } from './types';
let wasmDilation2DBackpropInput;
function setup(backend) {
    wasmDilation2DBackpropInput =
        backend.wasm.cwrap(Dilation2DBackpropInput, null, [
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number',
            'number', // padLeft
        ]);
}
export function dilation2DBackpropInput(args) {
    const { inputs, backend, attrs } = args;
    const { x, filter, dy } = inputs;
    const { strides, pad, dilations } = attrs;
    if (x.dtype !== filter.dtype || x.dtype !== dy.dtype) {
        throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${x.dtype}, ${filter.dtype}, and ${dy.dtype}`);
    }
    const dilationInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 
    /*dataFormat=*/ 'NHWC', dilations);
    const gradients = backend.makeOutput(x.shape, x.dtype);
    wasmDilation2DBackpropInput(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(filter.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(gradients.dataId).id, CppDType[x.dtype], dilationInfo.batchSize, 
    /*depth=*/ dilationInfo.inChannels, dilationInfo.inHeight, dilationInfo.inWidth, dilationInfo.outHeight, dilationInfo.outWidth, dilationInfo.strideHeight, dilationInfo.strideWidth, dilationInfo.dilationHeight, dilationInfo.dilationWidth, dilationInfo.filterHeight, dilationInfo.filterWidth, dilationInfo.padInfo.top, dilationInfo.padInfo.left);
    return gradients;
}
export const dilation2DBackpropInputConfig = {
    kernelName: Dilation2DBackpropInput,
    backendName: 'wasm',
    setupFunc: setup,
    kernelFunc: dilation2DBackpropInput
};
//# sourceMappingURL=data:application/json;base64,